// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи
model User {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  firstName   String
  lastName    String?
  username    String?
  photoUrl    String?
  // Новые поля для профиля
  phone       String?
  email       String?
  birthDate   DateTime?
  registrationDate DateTime @default(now())
  totalBonuses Decimal  @default(0) @db.Decimal(10, 2) // текущий баланс бонусов
  totalOrders  Int      @default(0) // количество заказов
  totalSpent   Decimal  @default(0) @db.Decimal(10, 2) // общая сумма заказов
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  orders      Order[]
  bonuses     UserBonus[]
  bonusHistory BonusHistory[]
  chatMessages ChatMessage[]

  @@map("users")
}

// Категории меню
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  items       MenuItem[]

  @@map("categories")
}

// Блюда меню
model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  ingredients String?
  price       Decimal  @db.Decimal(10, 2)
  weight      Int?     // вес в граммах
  calories    Int?
  proteins    Decimal? @db.Decimal(5, 2)
  fats        Decimal? @db.Decimal(5, 2)
  carbs       Decimal? @db.Decimal(5, 2)
  imageUrl    String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  hasVariants Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  variants    MenuVariant[]

  @@map("menu_items")
}

// Варианты блюд (например, на воде/на молоке для каши)
model MenuVariant {
  id          String   @id @default(cuid())
  name        String
  description String?
  priceModifier Decimal @default(0) @db.Decimal(10, 2) // изменение цены от базовой
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  menuItemId  String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("menu_variants")
}

// Заказы
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  userId          String
  items           Json        // JSON массив с товарами
  totalAmount     Decimal     @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @db.Decimal(10, 2) // размер скидки
  bonusesUsed     Decimal     @default(0) @db.Decimal(10, 2) // использовано бонусов
  bonusesEarned   Decimal     @default(0) @db.Decimal(10, 2) // начислено бонусов
  promoCode       String?     // использованный промокод
  status          OrderStatus @default(PENDING)
  deliveryType    DeliveryType @default(TAKEAWAY)
  deliveryAddress String?
  flightNumber    String?
  customerName    String?
  phone           String?
  email           String?
  notes           String?
  deliveryTime    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Связи
  user            User        @relation(fields: [userId], references: [telegramId])

  @@map("orders")
}

// Статусы заказов
enum OrderStatus {
  PENDING     // Ожидает подтверждения
  CONFIRMED   // Подтвержден
  PREPARING   // Готовится
  READY       // Готов к доставке
  DELIVERING  // Доставляется
  DELIVERED   // Доставлен
  CANCELLED   // Отменен

  @@map("order_status")
}

// Типы доставки
enum DeliveryType {
  ONBOARD   // На борт
  TAKEAWAY  // С собой

  @@map("delivery_type")
}

// Бонусы пользователей
model UserBonus {
  id          String      @id @default(cuid())
  userId      String
  amount      Decimal     @db.Decimal(10, 2)
  type        BonusType
  description String
  orderId     String?     // связь с заказом, если бонус начислен/списан за заказ
  expiresAt   DateTime?   // дата истечения бонусов
  createdAt   DateTime    @default(now())

  // Связи
  user        User        @relation(fields: [userId], references: [telegramId])

  @@map("user_bonuses")
}

// Типы бонусных операций
enum BonusType {
  EARNED    // Начислено
  SPENT     // Потрачено
  EXPIRED   // Сгорело

  @@map("bonus_type")
}

// История бонусов (детальная история операций)
model BonusHistory {
  id          String      @id @default(cuid())
  userId      String
  amount      Decimal     @db.Decimal(10, 2)
  type        BonusType
  description String
  orderId     String?     // связь с заказом
  balanceBefore Decimal   @db.Decimal(10, 2) // баланс до операции
  balanceAfter Decimal    @db.Decimal(10, 2) // баланс после операции
  expiresAt   DateTime?   // дата истечения (для начисленных бонусов)
  createdAt   DateTime    @default(now())

  // Связи
  user        User        @relation(fields: [userId], references: [telegramId])

  @@map("bonus_history")
}

// Промокоды
model PromoCode {
  id          String      @id @default(cuid())
  code        String      @unique
  description String?
  discountType DiscountType
  discountValue Decimal   @db.Decimal(10, 2)
  minOrderAmount Decimal? @db.Decimal(10, 2) // минимальная сумма заказа
  maxUsage    Int?        // максимальное количество использований
  usageCount  Int         @default(0)
  isActive    Boolean     @default(true)
  validFrom   DateTime    @default(now())
  validUntil  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("promo_codes")
}

// Типы скидок
enum DiscountType {
  PERCENTAGE  // Процент
  FIXED       // Фиксированная сумма

  @@map("discount_type")
}

// Сообщения чата
model ChatMessage {
  id          String      @id @default(cuid())
  userId      String
  orderId     String?     // связь с заказом, если сообщение относится к заказу
  message     String
  isFromAdmin Boolean     @default(false)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())

  // Связи
  user        User        @relation(fields: [userId], references: [telegramId])

  @@map("chat_messages")
}

// Настройки приложения
model AppSettings {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("app_settings")
} 